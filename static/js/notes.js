// –°–∏—Å—Ç–µ–º–∞ –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è EPUB Cutter
class NotesSystem {
    constructor() {
        this.bookId = null;
        this.chapterTitle = null;
        this.init();
    }

    init() {
        // –ü–æ–ª—É—á–∞–µ–º bookId –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–ª–∞–≤—ã –∏–∑ URL –∏–ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        this.extractPageInfo();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.setupEventListeners();
        
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        this.createNoteInterface();
    }

    extractPageInfo() {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å bookId –∏–∑ URL
        const pathParts = window.location.pathname.split('/');
        if (pathParts.includes('book') && pathParts.length >= 3) {
            // URL –≤–∏–¥–∞ /book/{book_path}/{filename}
            this.bookPath = pathParts[2];
            
            // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–ª–∞–≤—ã –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            const titleElement = document.querySelector('title');
            if (titleElement) {
                const fullTitle = titleElement.textContent;
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–ª–∞–≤—ã (–¥–æ –ø–µ—Ä–≤–æ–≥–æ ' - ')
                this.chapterTitle = fullTitle.split(' - ')[0] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥–ª–∞–≤–∞';
            }
            
            // –ü–æ–ª—É—á–∞–µ–º bookId –∏–∑ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–ª–∏ –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
            this.getBookIdFromPath();
        }
    }

    async getBookIdFromPath() {
        // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å bookId –ø–æ bookPath
        // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ - –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ localStorage –∏–ª–∏ –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
        try {
            const response = await fetch(`/api/book-info?path=${encodeURIComponent(this.bookPath)}`);
            if (response.ok) {
                const data = await response.json();
                this.bookId = data.book_id;
            }
        } catch (error) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å book_id:', error);
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ - –∏—â–µ–º –≤ localStorage
            this.bookId = localStorage.getItem('currentBookId');
        }
    }

    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        document.addEventListener('mouseup', (e) => {
            this.handleTextSelection(e);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à
        document.addEventListener('keydown', (e) => {
            if (e.ctrlKey && e.key === 's') {
                e.preventDefault();
                this.saveSelectedText();
            }
        });
    }

    handleTextSelection(event) {
        const selection = window.getSelection();
        const selectedText = selection.toString().trim();

        if (selectedText.length > 0) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
            this.showNoteButton(event, selectedText, selection);
        } else {
            // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            this.hideNoteButton();
        }
    }

    showNoteButton(event, selectedText, selection) {
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
        this.hideNoteButton();

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É
        const button = document.createElement('div');
        button.id = 'note-save-button';
        button.className = 'note-save-button';
        button.innerHTML = `
            <button onclick="notesSystem.saveQuote('${this.escapeHtml(selectedText)}')">
                üìù –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∑–∞–º–µ—Ç–∫–∏
            </button>
        `;

        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —Ä—è–¥–æ–º —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        const rect = selection.getRangeAt(0).getBoundingClientRect();
        button.style.position = 'absolute';
        button.style.left = `${rect.left + window.scrollX}px`;
        button.style.top = `${rect.bottom + window.scrollY + 5}px`;
        button.style.zIndex = '1000';

        document.body.appendChild(button);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            this.hideNoteButton();
        }, 5000);
    }

    hideNoteButton() {
        const existingButton = document.getElementById('note-save-button');
        if (existingButton) {
            existingButton.remove();
        }
    }

    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML.replace(/'/g, '&#39;');
    }

    async saveQuote(selectedText) {
        if (!this.bookId) {
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–Ω–∏–≥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
            return;
        }

        try {
            const response = await fetch('/api/notes', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    book_id: this.bookId,
                    chapter_title: this.chapterTitle,
                    selected_text: selectedText,
                    note_text: ''
                })
            });

            const data = await response.json();
            
            if (data.success) {
                this.showSuccessMessage();
                this.hideNoteButton();
                
                // –û—á–∏—â–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
                window.getSelection().removeAllRanges();
            } else {
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: ' + data.error);
            }
        } catch (error) {
            console.error('Error saving note:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏');
        }
    }

    showSuccessMessage() {
        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
        const notification = document.createElement('div');
        notification.className = 'note-success-notification';
        notification.textContent = '‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!';
        notification.style.position = 'fixed';
        notification.style.top = '20px';
        notification.style.right = '20px';
        notification.style.backgroundColor = '#4CAF50';
        notification.style.color = 'white';
        notification.style.padding = '10px 20px';
        notification.style.borderRadius = '5px';
        notification.style.zIndex = '1001';
        notification.style.boxShadow = '0 2px 10px rgba(0,0,0,0.3)';

        document.body.appendChild(notification);

        // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            notification.remove();
        }, 3000);
    }

    createNoteInterface() {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–º–µ—Ç–∫–∏" –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏—é, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
        this.addNotesButtonToNavigation();
    }

    addNotesButtonToNavigation() {
        const navigation = document.querySelector('.navigation');
        if (navigation && !document.querySelector('.notes-nav-button')) {
            const notesButton = document.createElement('a');
            notesButton.href = `/notes/${this.bookId}`;
            notesButton.className = 'nav-button notes-nav-button';
            notesButton.innerHTML = 'üìù –ó–∞–º–µ—Ç–∫–∏';
            notesButton.target = '_blank'; // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
            
            navigation.appendChild(notesButton);
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –∑–∞–º–µ—Ç–æ–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
let notesSystem;
document.addEventListener('DOMContentLoaded', function() {
    notesSystem = new NotesSystem();
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ bookId –∏–∑–≤–Ω–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞)
function setBookId(bookId) {
    if (window.notesSystem) {
        window.notesSystem.bookId = bookId;
    } else {
        localStorage.setItem('currentBookId', bookId);
    }
}