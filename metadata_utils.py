#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ EPUB —Ñ–∞–π–ª–æ–≤
"""

def extract_epub_metadata(opf_root):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏ –∞–≤—Ç–æ—Ä–∞ –∏–∑ OPF —Ñ–∞–π–ª–∞
    
    Args:
        opf_root: XML —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–Ω—è OPF —Ñ–∞–π–ª–∞
        
    Returns:
        tuple: (title, author)
    """
    book_title = "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    book_author = "–ê–≤—Ç–æ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
    
    try:
        # –ü–æ–∏—Å–∫ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏ - –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        title_elem = opf_root.find('.//{http://purl.org/dc/elements/1.1/}title')
        if title_elem is not None and title_elem.text:
            book_title = title_elem.text.strip()
        else:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –±–µ–∑ namespace
            title_elem = opf_root.find('.//title')
            if title_elem is not None and title_elem.text:
                book_title = title_elem.text.strip()
        
        # –ü–æ–∏—Å–∫ –∞–≤—Ç–æ—Ä–∞ - –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        creator_elem = opf_root.find('.//{http://purl.org/dc/elements/1.1/}creator')
        if creator_elem is not None and creator_elem.text:
            book_author = creator_elem.text.strip()
        else:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–∏—Å–∫–∏
            author_variants = [
                './/creator',
                './/{http://purl.org/dc/elements/1.1/}author', 
                './/author',
                './/{http://purl.org/dc/elements/1.1/}contributor[@opf:role="aut"]'
            ]
            
            for variant in author_variants:
                try:
                    author_elem = opf_root.find(variant)
                    if author_elem is not None and author_elem.text:
                        book_author = author_elem.text.strip()
                        break
                except:
                    continue
        
        # –û—á–∏—Å—Ç–∫–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
        if book_title and len(book_title) > 100:
            book_title = book_title[:97] + "..."
            
        if book_author and len(book_author) > 80:
            book_author = book_author[:77] + "..."
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
        
    return book_title, book_author

def format_book_info(title, author, style="basic"):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    Args:
        title: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏
        author: –∞–≤—Ç–æ—Ä
        style: —Å—Ç–∏–ª—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ("basic", "modern", "compact")
        
    Returns:
        str: –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    if not title and not author:
        return ""
        
    if style == "modern":
        return f'üìö "{title}" ‚Äî {author}'
    elif style == "compact":
        return f'"{title}" ‚Äî {author}'
    else:  # basic
        return f'üìñ "{title}" ‚Äî {author}'